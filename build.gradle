plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.adityakrmishra.ml'
version = '1.0.0'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-math3:3.6.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // Run JaCoCo report after tests
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test // Tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    toolVersion = '8.45.1'
    config = resources.text.fromFile('config/checkstyle/checkstyle.xml')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

application {
    mainClass = 'com.adityakrmishra.ml.Main' // Replace with your main class
}

task javadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    destinationDir = file("${buildDir}/docs/javadoc")
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.links("https://docs.oracle.com/en/java/javase/11/docs/api/")
}

task generateSourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task generateJavadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives generateSourcesJar
    archives generateJavadocJar
}

task printVersion {
    doLast {
        println "Project Version: ${project.version}"
    }
}
